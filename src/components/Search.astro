---
// Heavily based off https://github.com/chrismwilliams/astro-theme-cactus/blob/main/src/components/Search.astro
// Also used https://github.com/shishkin/astro-pagefind/blob/main/packages/astro-pagefind/src/components/Search.astro

const bundlePath = `${process.env.BASE_URL}/pagefind/`
// the bundle path does not work, so it is currently hardcoded
import '@pagefind/default-ui/css/ui.css'
import SearchIcon from './icons/SearchIcon.astro'
---

<site-search id='search' class='ms-auto'>
	<button data-open-modal disabled class='flex items-center justify-center rounded-md gap-1'>
		<SearchIcon />
		<!-- <span class='md:hidden text-2xl'> Search</span> -->
	</button>
	<dialog
		aria-label='search'
		class='h-full max-h-full w-full max-w-full border border-zinc-400 bg-zinc-200 dark:bg-[#0a0910ec] shadow backdrop:backdrop-blur sm:mx-auto sm:mb-auto sm:mt-16 sm:h-max sm:max-h-[calc(100%-8rem)] sm:min-h-[15rem] sm:w-5/6 sm:max-w-[48rem] sm:rounded-md opacity-0'
	>
		<div class='dialog-frame flex flex-col gap-4 p-6 pt-12 sm:pt-6'>
			<button
				data-close-modal
				class='ms-auto cursor-pointer rounded-full bg-black text-white px-4 py-2 dark:bg-zinc-200 dark:text-black'
				>Close</button
			>
			{
				import.meta.env.DEV ? (
					<div class='mx-auto text-center dark:text-white'>
						<p>
							Search is only available in production builds. <br />
							Try building and previewing the site to test it out locally.
						</p>
					</div>
				) : (
					<div class='search-container dark:text-white'>
						<div
							id='search'
							data-bundle-path={'/pagefind/'}
							class='pagefind-init pagefind-ui'
							data-pagefind-ui
						/>
					</div>
				)
			}
		</div>
	</dialog>
</site-search>

<script>
	//@ts-expect-error
	import { PagefindUI } from '@pagefind/default-ui'

	function initPageFind() {
		const allSelector = '[data-pagefind-ui]'
		for (const el of document.querySelectorAll(`${allSelector}.pagefind-init`)) {
			const elSelector = [
				...(el.id ? [`#${el.id}`] : []),
				...[...el.classList.values()].map((c) => `.${c}`),
				allSelector
			].join('')
			const bundlePath = el.getAttribute('data-bundle-path')
			const opts = { showImages: false, showSubResults: true }
			new PagefindUI({
				...opts,
				element: elSelector,
				bundlePath
			})
			el.classList.remove('pagefind-init')
			const query = el.getAttribute('data-query')
			if (query) {
				const input = el.querySelector<HTMLInputElement>(`input[type="text"]`)
				if (input) {
					input.value = query
					input.dispatchEvent(new Event('input', { bubbles: true }))
				}
			}
		}
	}

	document.addEventListener('DOMContentLoaded', initPageFind)
	document.addEventListener('astro:page-load', initPageFind)
</script>

<script>
	import { animate } from 'motion'
	class SiteSearch extends HTMLElement {
		constructor() {
			super()
			const openBtn = this.querySelector<HTMLButtonElement>('button[data-open-modal]')!
			const closeBtn = this.querySelector<HTMLButtonElement>('button[data-close-modal]')!
			const dialog = this.querySelector('dialog')!
			const dialogFrame = this.querySelector('.dialog-frame')!

			const onWindowClick = (event: MouseEvent) => {
				// make sure the click is outside the of the dialog
				if (
					document.body.contains(event.target as Node) &&
					!dialogFrame.contains(event.target as Node)
				)
					closeModal()
			}

			const openModal = (event?: MouseEvent) => {
				dialog.showModal()

				animate(
					'dialog',
					{
						clipPath: [
							'polygon(0 0, 100% 0, 100% -200%, -200% -200%)',
							'polygon(0 0, 100% 0, 100% 100%, 0% 100%)'
						],
						opacity: [0, 1]
					},
					{ duration: 0.2 }
				)
				document.body.classList.add('overflow-hidden')
				this.querySelector('input')?.focus()
				event?.stopPropagation()
				window.addEventListener('click', onWindowClick)
			}

			const closeModal = () => {
				dialog.close()
				document.body.classList.remove('overflow-hidden')
				window.removeEventListener('click', onWindowClick)
			}

			openBtn.addEventListener('click', openModal)
			openBtn.disabled = false
			closeBtn.addEventListener('click', closeModal)
			document.addEventListener('astro:after-swap', closeModal)

			// Listen for `/` keyboard shortcut
			window.addEventListener('keydown', (e) => {
				if (e.key === '/' && !dialog.open) {
					openModal()
					e.preventDefault()
				}
			})
		}
	}

	customElements.define('site-search', SiteSearch)
</script>

<style>
	.pagefind-ui {
		--pagefind-ui-scale: 0.75;
		--pagefind-ui-border-width: 1px;
		--pagefind-ui-border-radius: 0.25rem;
		width: 100%;
	}

	.pagefind-ui .pagefind-ui__drawer:not(.pagefind-ui__hidden) {
		position: absolute;
		left: 0;
		right: 0;
		margin-top: 0px;
		z-index: 9999;
		padding: 0 2em 1em;
		overflow-y: hidden;
		box-shadow:
			0 10px 10px -5px rgba(0, 0, 0, 0.2),
			0 2px 2px 0 rgba(0, 0, 0, 0.1);
		border-bottom-right-radius: var(--pagefind-ui-border-radius);
		border-bottom-left-radius: var(--pagefind-ui-border-radius);
		background-color: var(--pagefind-ui-background);
	}

	.pagefind-ui .pagefind-ui__result-link {
		color: var(--pagefind-ui-primary);
	}

	.pagefind-ui .pagefind-ui__result-excerpt {
		color: var(--pagefind-ui-text);
	}
</style>

<style is:global>
	.dark {
		--pagefind-ui-primary: #eeeeee;
		--pagefind-ui-text: #eeeeee;
		--pagefind-ui-background: #152028;
		--pagefind-ui-border: #152028;
		--pagefind-ui-tag: #152028;
	}
</style>
